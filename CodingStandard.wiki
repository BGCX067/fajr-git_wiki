# I wanna clean up my mess.

= Introduction =

Coding standard is an important part of coding practice. It is something like a common language for developers. If you ever tried to edit some code with random naming of variables, wrong indentation and without doccomments, you know what I'm talking about.

TODO: how to test for coding style violations.

= Details =

== Indentation ==
  * use spaces, not tabs
  * indent nested scope by 2 spaces

== Opening brace { ==
  * for classes, functions on next line
  * for inline structures (if, while, switch) on the line prepended by exactly one space.

Examples:
{{{
class Test
{
  function doIt()
  {
    if (1 == 2) {
      assert(false);
    }
  }
}
}}}

=TODO: everything else=

== Documentation comments ==
  * each file should contain a description of its purpose
  * each file should contain `@author`, `@package` and `@subpackage` doccomments
  * all functions should have a description of their purpose
  * note important variables with the `@var` doccomment
  * describe functions with `@return`, `@param` etc. doccoments as necessary
  * it is better to include more information than less (but be reasonable)

== Naming conventions ==

=== Files & directories ===
=== Namespaces ===
=== @package & @subpackage ===
  * @package: Fajr
  * @subpackage: Usually the path to the file, with __ instead of /. For example if a file belongs to `libfajr/base`, its subpackage should be `Libfajr__Base`.

=== Classes ===
=== Variables and functions ===
=== Constants ===